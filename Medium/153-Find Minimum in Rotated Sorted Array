# 153. Find Minimum in Rotated Sorted Array
# Leetcode link: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left, right = 0, len(nums) - 1

        if nums[left] <= nums[right]:
            return nums[left]
        
        while left < right:
            mid = (left + right) // 2
            # If middle element is greater than rightmost, minimum lies to the right of mid

            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                # Otherwise minimum is at mid or to its left
                right = mid
        
        # When the loop ends, left == right at the minimum index
        return nums[left]


         
if __name__ == "__main__":
    sol = Solution()
    # Define input arrays
    nums1 = [3, 4, 5, 1, 2]
    nums2 = [4, 5, 6, 7, 0, 1, 2]
    nums3 = [11, 13, 15, 17]

    # Run and print results
    print("Test1:", nums1, sol.findMin(nums1))  # expected 1
    print("Test2:", nums2, sol.findMin(nums2))  # expected 0
    print("Test3:", nums3, sol.findMin(nums3))  # expected 11
